service: gbraver-burst-serverless
frameworkVersion: '2'
useDotenv: true

custom:
  gbraverBurstConnections: gbraver_burst_connections-${sls:stage}
  casualMatchEntries: casual_match_entries-${sls:stage}
  battleCommands: battle-commands-${sls:stage}
  battles: battles-${sls:stage}

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-northeast-1
  lambdaHashingVersion: 20201221
  websocketsApiName: gbraver-burst-ws-api
  websocketsApiRouteSelectionExpression: $request.body.action
  environment:
    STAGE: ${sls:stage}
    WEBSOCKET_API_ID:
      Ref: WebsocketsApi
    GBRAVER_BURST_CONNECTIONS: ${self:custom.gbraverBurstConnections}
    CASUAL_MATCH_ENTRIES: ${self:custom.casualMatchEntries}
    BATTLE_COMMANDS: ${self:custom.battleCommands}
    AUTH0_JWKS_URL: ${env:AUTH0_JWKS_URL, ''}
    AUTH0_AUDIENCE: ${env:AUTH0_AUDIENCE, ''}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:Scan'
        - 'dynamodb:BatchWrite*'
      Resource:
        - Fn::GetAtt: [GbraverBurstConnectionsTable, Arn]
        - Fn::GetAtt: [CasualMatchEntriesTable, Arn]
        - Fn::GetAtt: [BattleCommandsTable, Arn]
        - Fn::GetAtt: [Battles, Arn]
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'

functions:
  auth:
    handler: src/handler.authorizer
  connect:
    handler: src/handler.connect
    events:
      - websocket:
          route: $connect
          authorizer:
            name: auth
            identitySource:
              - 'route.request.querystring.token'
  disconnect:
    handler: src/handler.disconnect
    events:
      - websocket:
          route: $disconnect
  ping:
    handler: src/handler.ping
    events:
      - websocket:
          route: ping
  enterCasualMatch:
    handler: src/handler.enterCasualMatch
    events:
      - websocket:
          route: enterCasualMatch
  pollingCasualMatchEntries:
    handler: src/handler.pollingCasualMatchEntries
    events:
      - schedule: rate(1 minute)

resources:
  Resources:
    GbraverBurstConnectionsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.gbraverBurstConnections}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CasualMatchEntriesTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.casualMatchEntries}
        AttributeDefinitions:
          - AttributeName: userID
            AttributeType: S
        KeySchema:
          - AttributeName: userID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BattleCommandsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.battleCommands}
        AttributeDefinitions:
          - AttributeName: battleID
            AttributeType: S
          - AttributeName: userID
            AttributeType: S
        KeySchema:
          - AttributeName: battleID
            KeyType: HASH
          - AttributeName: userID
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    Battles:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.battles}
        AttributeDefinitions:
          - AttributeName: battleID
            AttributeType: S
        KeySchema:
          - AttributeName: battleID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1