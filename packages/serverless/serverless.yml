service: sls-chat
frameworkVersion: '2'
useDotenv: true

custom:
  slsChatConnections: sls_chat_connections

plugins:
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs14.x
  region: ap-northeast-1
  lambdaHashingVersion: 20201221
  websocketsApiName: sls-chat-ws-api
  websocketsApiRouteSelectionExpression: $request.body.action
  environment:
    SLS_CHAT_CONNECTIONS: ${self:custom.slsChatConnections}
    AUTH0_JWKS_URL: ${env:AUTH0_JWKS_URL}
    AUTH0_AUDIENCE: ${env:AUTH0_AUDIENCE}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:Scan'
      Resource:
        - Fn::GetAtt: [SLSChatRoomConnectionsTable, Arn]
    - Effect: Allow
      Action:
        - 'execute-api:ManageConnections'
      Resource:
        - 'arn:aws:execute-api:*:*:**/@connections/*'

functions:
  auth:
    handler: src/authorizer.authorizer
  connect:
    handler: src/handler.connect
    events:
      - websocket:
          route: $connect
          authorizer:
            name: auth
            identitySource:
              - 'route.request.querystring.token'
  disconnect:
    handler: src/handler.disconnect
    events:
      - websocket:
          route: $disconnect
  default:
    handler: src/handler.sendMessage
    events:
      - websocket:
        route: $default
  sendMessage:
    handler: src/handler.sendMessage
    events:
      - websocket:
          route: sendmessage

resources:
  Resources:
    SLSChatRoomConnectionsTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.slsChatConnections}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1